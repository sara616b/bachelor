---
version: "3.9"

services:
  database:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=pagemanager
    networks:
      - dbnetwork
    restart: always
  # api:
  #   build:
  #     context: ./
  #     dockerfile: Dockerfile
  #   environment:
  #     - SITE=website
  #     - POSTGRES_USER=user
  #     - POSTGRES_PASSWORD=password
  #     - POSTGRES_DB=pagemanager
  #   working_dir: /app/project
  #   volumes:
  #     - media:/app/project/media/
  #     - static:/app/project/static/
  #     - .:/app/
  #   command: sh -c 'python manage.py check &&
  # python manage.py makemigrations && python manage.py
  # migrate && python manage.py runserver 0.0.0.0:8000'  # noqa
  #   ports:
  #     - "8002:8000"
  #   depends_on:
  #     - database
  #   restart: always
  #   links:
  #     - database:database
  #   networks:
  #     - dbnetwork
  #     - webnetwork
  website:
    build:
      context: ./
      dockerfile: Dockerfile.frontend
      args:
        - SITE=Website
    environment:
      - SITE=Website
      - WATCHPACK_POLLING=true
    working_dir: /app/frontend
    volumes:
      - ./frontend/src:/app/frontend/src
      - ./frontend/public:/app/frontend/public
    command: sh -c 'npm run start-website'
    ports:
      - "3000:3000"
    depends_on:
      - database
      # - api
    restart: always
    links:
      - database:database
    networks:
      - dbnetwork
      - webnetwork
  cms:
    build:
      context: ./
      dockerfile: Dockerfile.frontend
      args:
        - SITE=Cms
    environment:
      - SITE=Cms
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=false
      - CHOKIDAR_USEPOLLING=true
    working_dir: /app/frontend
    volumes:
      - ./frontend/src:/app/frontend/src
      - ./frontend/public:/app/frontend/public
    command: sh -c 'npm run start-cms'
    ports:
      - "3002:3002"
    depends_on:
      - database
      # - api
    links:
      - database:database
    restart: always
    networks:
      - dbnetwork
      - webnetwork
  nginx:
    image: nginx:latest
    volumes:
      # - media:/media/
      - static:/static/
      - ./nginx/:/etc/nginx/conf.d/

      # - ./nginx/${RTE}/conf.d:/etc/nginx/conf.d/sarahisabella.info.conf
      # - ./certs/:/etc/letsencrypt/
      # - static:/static/
      # - media:/media/
    ports:
      - 443:443
      - 80:80
    depends_on:
      - website
    networks:
      - webnetwork

volumes:
  postgres_data:
  media:
  static:

networks:
  dbnetwork:
  webnetwork:
